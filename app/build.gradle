apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.test.tddjunit5example"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.3.2"
    testImplementation "org.mockito:mockito-core:2.+"
}
//Steps to add JaCoCo a coverage result
//Gradle already has built-in support for generating test coverage reports and we don't need to create any additional configurations or add any plugins to generate test coverage report. Basically, the only thing we need to do is to set testCoverageEnabled parameter to true in build.gradle file as follows:
//
//android {
//    buildTypes {
//        debug {
//            testCoverageEnabled = true
//        }
//    }
//}
//Next, we can execute the following Gradle task from CLI:
//
//./gradlew createDebugCoverageReport
//On Windows, we can execute it like this:
//
//gradlew.bat createDebugCoverageReport
//Task will analyze code of our project in /src/main/java/ directory and unit tests placed in /src/androidTest/java/ directory. After executing this task, we can find test coverage report in the following directory of the module:
//
///build/outputs/reports/coverage/debug/
//        When we open index.html file, we can see a visual report from test coverage, which can be viewed in a web browser.
//
